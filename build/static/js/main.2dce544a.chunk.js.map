{"version":3,"sources":["redux/reducers/productReducer.ts","components/ProductList.tsx","App.tsx","actions/productActions.ts","redux/store.ts","index.tsx"],"names":["initialState","GET_PRODUCTS","ProductList","_ref","products","_jsx","List","children","map","product","_jsxs","ListItem","ListItemAvatar","Avatar","ImageIcon","ListItemText","primary","name","secondary","price","id","App","dispatch","useDispatch","useSelector","state","useEffect","async","type","payload","className","store","createStore","arguments","length","undefined","action","applyMiddleware","thunk","ReactDOM","render","React","StrictMode","Provider","document","getElementById"],"mappings":"sKAYA,MAAMA,EAA0B,GAGnBC,EAAe,e,2DCcbC,MAfiCC,IAAA,IAAC,SAAEC,GAAUD,EAAA,OAC3DE,cAACC,IAAI,CAAAC,SACFH,EAASI,KAAKC,GACbC,eAACC,IAAQ,CAAAJ,SAAA,CACPF,cAACO,IAAc,CAAAL,SACbF,cAACQ,IAAM,CAAAN,SACLF,cAACS,IAAS,QAGdT,cAACU,IAAY,CAACC,QAASP,EAAQQ,KAAMC,UAAWT,EAAQU,UAN3CV,EAAQW,OASpB,ECAMC,MAlBOA,KACpB,MAAMC,EAAWC,cACXnB,EAAWoB,aAAaC,GAAqBA,IAMnD,OAJAC,qBAAU,KACRJ,GCGoFK,UAQtFL,EAAS,CACPM,KAAM3B,EACN4B,QAR0B,CAC1B,CAAET,GAAI,EAAGH,KAAM,YAAaE,MAAO,KACnC,CAAEC,GAAI,EAAGH,KAAM,YAAaE,MAAO,KACnC,CAAEC,GAAI,EAAGH,KAAM,YAAaE,MAAO,OAMnC,GDduB,GACtB,CAACG,IAGFZ,eAAA,OAAKoB,UAAU,MAAKvB,SAAA,CAClBF,cAAA,UAAQyB,UAAU,aAAYvB,SAC5BF,cAAA,MAAAE,SAAI,mBAENF,cAACH,EAAW,CAACE,SAAUA,MACnB,E,gBEhBV,MAAM2B,EAAQC,aJoBP,WAGO,IAFZP,EAAKQ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGjC,EACRoC,EAA0BH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAE1B,OAAQC,EAAOR,OACR3B,EACImC,EAAOP,QAEPJ,CAEb,GI9B0CY,YAAgBC,MAC3CP,QCCfQ,IAASC,OACPnC,cAACoC,IAAMC,WAAU,CAAAnC,SACfF,cAACsC,IAAQ,CAACZ,MAAOA,EAAMxB,SACrBF,cAACgB,EAAG,QAGRuB,SAASC,eAAe,Q","file":"static/js/main.2dce544a.chunk.js","sourcesContent":["import { Action } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\nimport { RootState } from '../store';\n\n// Define product type\nexport interface Product {\n  id: number;\n  name: string;\n  price: number;\n}\n\n// Define the initial state\nconst initialState: Product[] = [];\n\n// Define action types\nexport const GET_PRODUCTS = 'GET_PRODUCTS';\n\ninterface GetProductsAction {\n  type: typeof GET_PRODUCTS;\n  payload: Product[];\n}\n\n// Combine the action types\nexport type ProductActionTypes = GetProductsAction;\n\n// Define the reducer\nexport function productReducer(\n  state = initialState,\n  action: ProductActionTypes\n): Product[] {\n  switch (action.type) {\n    case GET_PRODUCTS:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n\n// Define async actions\nexport const getProducts = (): ThunkAction<void, RootState, unknown, Action<string>> => async dispatch => {\n  // Here you would usually make an API call to get the products, but for simplicity we will just return a static list\n  const products: Product[] = [\n    { id: 1, name: 'Product 1', price: 100 },\n    { id: 2, name: 'Product 2', price: 200 },\n    { id: 3, name: 'Product 3', price: 300 },\n  ];\n\n  dispatch({\n    type: GET_PRODUCTS,\n    payload: products,\n  });\n};\n","import React from 'react';\nimport { List, ListItem, ListItemText, ListItemAvatar, Avatar } from '@material-ui/core';\nimport { Image as ImageIcon } from '@material-ui/icons';\n\ninterface Product {\n  id: number;\n  name: string;\n  price: number;\n}\n\ninterface ProductListProps {\n  products: Product[];\n}\n\nconst ProductList: React.FC<ProductListProps> = ({ products }) => (\n  <List>\n    {products.map((product) => (\n      <ListItem key={product.id}>\n        <ListItemAvatar>\n          <Avatar>\n            <ImageIcon />\n          </Avatar>\n        </ListItemAvatar>\n        <ListItemText primary={product.name} secondary={product.price} />\n      </ListItem>\n    ))}\n  </List>\n);\n\nexport default ProductList;","import React, { useEffect } from 'react';\nimport { AnyAction } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getProducts } from './actions/productActions';\nimport ProductList from './components/ProductList';\nimport { RootState } from './redux/store';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch<ThunkDispatch<RootState, undefined, AnyAction>>();\n  const products = useSelector((state: RootState) => state);\n\n  useEffect(() => {\n    dispatch(getProducts());\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Product List</h1>\n      </header>\n      <ProductList products={products} />\n    </div>\n  );\n};\n\nexport default App;\n","import { Action } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\nimport { RootState } from '../redux/store';\nimport { GET_PRODUCTS } from '../redux/reducers/productReducer';\n\n\ninterface Product {\n  id: number;\n  name: string;\n  price: number;\n}\n\n// interface ProductListProps {\n//   products: Product[];\n// }\n// Define async actions\nexport const getProducts = (): ThunkAction<void, RootState, unknown, Action<string>> => async dispatch => {\n  // Here you would usually make an API call to get the products, but for simplicity we will just return a static list\n  const products: Product[] = [\n    { id: 1, name: 'Product 1', price: 100},\n    { id: 2, name: 'Product 2', price: 200},\n    { id: 3, name: 'Product 3', price: 300},\n  ];\n\n  dispatch({\n    type: GET_PRODUCTS,\n    payload: products,\n  });\n};\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { productReducer } from './reducers/productReducer';\n\nexport type RootState = ReturnType<typeof productReducer>\n\nconst store = createStore(productReducer, applyMiddleware(thunk));\nexport default store;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './redux/store';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}