{"version":3,"sources":["redux/reducers/productReducer.ts","components/ProductList.tsx","App.tsx","actions/productActions.ts","index.tsx"],"names":["GET_PRODUCTS","ProductList","_ref","products","_jsx","children","map","product","_jsxs","name","price","id","App","dispatch","useDispatch","useSelector","state","useEffect","async","type","payload","className","ReactDOM","render","React","StrictMode","Router","basename","process","document","getElementById"],"mappings":"qKAYA,MAGaA,EAAe,e,WCKbC,MAbiCC,IAAmB,IAAlB,SAAEC,GAAUD,EAC3D,OACEE,cAAA,OAAAC,SACGF,EAASG,KAAKC,GACbC,eAAA,OAAAH,SAAA,CACED,cAAA,MAAAC,SAAKE,EAAQE,OACbL,cAAA,KAAAC,SAAIE,EAAQG,UAFJH,EAAQI,OAKhB,ECUKC,MAlBOA,KACpB,MAAMC,EAAWC,cACXX,EAAWY,aAAaC,GAAqBA,IAMnD,OAJAC,qBAAU,KACRJ,GCPoFK,UAQtFL,EAAS,CACPM,KAAMnB,EACNoB,QAR0B,CAC1B,CAAET,GAAI,EAAGF,KAAM,YAAaC,MAAO,KACnC,CAAEC,GAAI,EAAGF,KAAM,YAAaC,MAAO,KACnC,CAAEC,GAAI,EAAGF,KAAM,YAAaC,MAAO,OAMnC,GDJuB,GACtB,CAACG,IAGFL,eAAA,OAAKa,UAAU,MAAKhB,SAAA,CAClBD,cAAA,UAAQiB,UAAU,aAAYhB,SAC5BD,cAAA,MAAAC,SAAI,mBAEND,cAACH,EAAW,CAACE,SAAUA,MACnB,E,OEdVmB,IAASC,OACPnB,cAACoB,IAAMC,WAAU,CAAApB,SACfD,cAACsB,IAAM,CAACC,SAAUC,8BAAuBvB,SACvCD,cAACQ,EAAG,QAMRiB,SAASC,eAAe,Q","file":"static/js/main.98883854.chunk.js","sourcesContent":["import { Action } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\nimport { RootState } from '../store';\n\n// Define product type\nexport interface Product {\n  id: number;\n  name: string;\n  price: number;\n}\n\n// Define the initial state\nconst initialState: Product[] = [];\n\n// Define action types\nexport const GET_PRODUCTS = 'GET_PRODUCTS';\n\ninterface GetProductsAction {\n  type: typeof GET_PRODUCTS;\n  payload: Product[];\n}\n\n// Combine the action types\nexport type ProductActionTypes = GetProductsAction;\n\n// Define the reducer\nexport function productReducer(\n  state = initialState,\n  action: ProductActionTypes\n): Product[] {\n  switch (action.type) {\n    case GET_PRODUCTS:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n\n// Define async actions\nexport const getProducts = (): ThunkAction<void, RootState, unknown, Action<string>> => async dispatch => {\n  // Here you would usually make an API call to get the products, but for simplicity we will just return a static list\n  const products: Product[] = [\n    { id: 1, name: 'Product 1', price: 100 },\n    { id: 2, name: 'Product 2', price: 200 },\n    { id: 3, name: 'Product 3', price: 300 },\n  ];\n\n  dispatch({\n    type: GET_PRODUCTS,\n    payload: products,\n  });\n};\n","import React from 'react';\nimport { Product } from '../redux/reducers/productReducer';\n\ninterface ProductListProps {\n  products: Product[];\n}\n\nconst ProductList: React.FC<ProductListProps> = ({ products }) => {\n  return (\n    <div>\n      {products.map((product) => (\n        <div key={product.id}>\n          <h2>{product.name}</h2>\n          <p>{product.price}</p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\nimport { AnyAction } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getProducts } from './actions/productActions';\nimport ProductList from './components/ProductList';\nimport { RootState } from './redux/store';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch<ThunkDispatch<RootState, undefined, AnyAction>>();\n  const products = useSelector((state: RootState) => state);\n\n  useEffect(() => {\n    dispatch(getProducts());\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Product List</h1>\n      </header>\n      <ProductList products={products} />\n    </div>\n  );\n};\n\nexport default App;\n","import { Action } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\nimport { RootState } from '../redux/store';\nimport { Product, GET_PRODUCTS } from '../redux/reducers/productReducer';\n\n// Define async actions\nexport const getProducts = (): ThunkAction<void, RootState, unknown, Action<string>> => async dispatch => {\n  // Here you would usually make an API call to get the products, but for simplicity we will just return a static list\n  const products: Product[] = [\n    { id: 1, name: 'Product 1', price: 100 },\n    { id: 2, name: 'Product 2', price: 200 },\n    { id: 3, name: 'Product 3', price: 300 },\n  ];\n\n  dispatch({\n    type: GET_PRODUCTS,\n    payload: products,\n  });\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './redux/store';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n    </Router>\n    {/* <Provider store={store}>\n      <App />\n    </Provider> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}